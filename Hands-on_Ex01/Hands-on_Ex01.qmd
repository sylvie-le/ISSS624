---
title: "Hands-on Exercise 1: Geospatial Wrangling and Choropleth Mapping with R"
editor: visual
---

# Geospatial Wrangling

## **Overview**

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

## **Getting Started**

The code chunk below installs and loads [sf](https://cran.r-project.org/web/packages/sf/index.html) and tidyverse.

*Notes:* Make sure you imported the `pacman` package before running the code below.

```{r}
pacman::p_load(sf, tidyverse)
```

## **Import Geospatial Data**

Before importing anything, download the data zip file(s), unzip, and put them into the folder inside the directory of your page. Then create a Quarto document within that folder. The Quarto document and the data files need to be in the same folder, or you need to clarify the path to the data file while running the code below.

### Import polygon feature data

*Notes:* You need to save your working R document as an qmd file before you can run the code below.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### Import polyline feature data

Run the code chunk below.

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

### Import GIS data in kml format

Run the code chunk below.

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

## Checking Data Frame Content

### Working with st_geometry()

The type of geometry is multipolygon.

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

Glimpse display a sneak peek into the data type and values of the variables. Notice that `X_ADDR` and `Y_ADDR` are double type. There are other types like character, integer, and date.

```{r}
glimpse(mpsz)
```

### Working with head()

Use `n = …` to select the number of records to display. Head gives a look at the first few rows of the data frame.

```{r}
head(mpsz, n = 5)
```

## Plotting The Geopspatial Data

With geospatial data, we can use the plot() function to display them as visual elements. We can use `max.plot = …` to define the number of plots shown. This data set has 15 plots at the maximum but we only sketch 9 plots here, hence max.plot = 9.

```{r}
plot(mpsz, max.plot = 9)
```

We can choose to plot just one plot using the code chunk below. This is the plot of the sf object, which is the frame of all plots.

```{r}
plot(st_geometry(mpsz))
```

Or we can plot and view a specific attribute.

```{r}
plot(mpsz["PLN_AREA_N"])
```

> Notes: plot is only used for a quickly. For high cartographic quality plot, use tmap R package.

## Working with Projection

When we want to project two or more geospatial data sets, it is important to ensure the data sets are projected under the same coordinate system. **Projection Transformation** is the method of projecting a data frame from one coordinate system to another.

### Assign EPSG code to a data frame

Issues to notice: missing coordination or wrongly assigned coordination due to the importing process.

Using the code chunk below, we can see the coordinate system of `mpsz`.

```{r}
st_crs(mpsz)
```

> Notice the `User input` says the data is projected in `svy21`, but the EPSG code is `9001`. This is a wrong EPSG code because the EPSG code for svy21 should be [3414](https://epsg.io/3414).

We now assign the correct EPSG code using the code below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

R warns us that `st_crs` does not reproject data. While this is true in case we want to do projection transformation, here we simply want to fix the EPSG code. Therefore, reprojection is not necessary and we can proceed with checking the EPSG of `mpsz3414`, which shows the correct EPSG code.

```{r}
st_crs(mpsz3414)
```

### Transform the projection of preschool from wgs84 to svy21

Now we inspect the geometry of `preschool`. It is clear that preschool is projected in the WGS84 coordinate system.

```{r}
st_geometry(preschool)
```

We will transform the projection of preschool to svy21 using `st_transform`.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Now we can inspect the geometry of `preschool3414`, which is now projected in svy21 coordinate system.

```{r}
st_geometry(preschool3414)
```

> *Notes*: in `Bounding box`, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

## Importing and Converting an Aspatial Data

### Import aspatial data

Because the listings dataset is in the csv format, we use the `read.csv()` function to import the data into an object called `listings`, which is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read.csv("data/aspatial/listings.csv")
```

To inspect the data set, instead of using `glimpse`, now we use `list` because of the object type.

```{r}
options(max.print = 5)
list(listings)
```

We can see that `listings` has 4,252 rows and 16 columns. We are going to use `latitude` and `longitude`.

> Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### Create a simple feature data frame

We now convert `listings` into a simple feature data frame using `st_as_sf()`.

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 3414)
```

**Notes**

> -   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
>
> -   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).
>
> -   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

After the transformation, we can examine the new object `listings_sf` using `glimpse`.

```{r}
glimpse(listings_sf)
```

## Geoprocessing with SF package

### Buffering

**The scenario**

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**Solution**

Compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

Calculate the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

**The scenario**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution**

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

Now we check the new `PreSch Count` field.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

### Calculate the density of pre-school by planning subzone

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

**Results**

```{r}
summary(mpsz3414$`PreSch Density`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Density`)
```

## Exploratory Data Analysis

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`, main = "Histogram of School Density", xlab = "School Density")
```

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

### Relationship between Pre-school Density and Pre-school Count

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`))) +
  geom_point() +
  labs(x = "Pre-school Density (per km square)",
       y = "Pre-school Count")
```

# Choropleth Mapping

## Overview

Choropleth map is a map showing different colors depending on the value of the attribute that the map is presenting. For example, a map showing population density have different colors for each areas with varying levels of population density.

## Getting Started

This exercise will use the [tmap](https://cran.r-project.org/web/packages/tmap/) R package and four other R packages.

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

First, we load the packages into R Studio.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## Importing Data into R

### Importing Geospatial Data into R

Since we already imported and inspected the `MP4_SUBZONE_WEB_PL` shapefile as `mpsz`, we can skip this step.

### Importing Attribute Data into R

```{r}
popdata <- read_csv('~/sylvie-le/ISSS624/Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv')
```

### Data Preparation

### We need to prepare a data table with the necessary data points as below.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

#### Data Wrangling

The functions below is used to wrangle the data as defined above.

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

#### Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

Since `funs()` was deprecated, we use `list()` instead.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

After that, we conduct a left join of the data using `left_join()` , to ensure the output to be simple features data frame.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

Now we save the new file after creating a new folder called rds in data folder.

```{r}
write_rds(mpsz_pop2020, "~/sylvie-le/ISSS624/Hands-on_Ex01/data/rds/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data Using tmap

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### Method 1: Plotting using qtm()

```{r}
tmap_mode(mode = "plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```
