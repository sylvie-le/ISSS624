---
title: "Global and Local Measures of Spatial Autocorrelation"
editor: visual
---

## Overview

This exercise provide the steps of computing the Global and Local Measures of Spatial Autocorrelation using `spdep` package.

## Getting Started

### The analytical question

We may ask, is a character or attribute evenly distributed across areas or regions? If they are not, then is there a sign of spatial clustering, and if yes, where are the clusters? Those questions can be applied to a wide range of domains: development planning of city councils, shop outlet location setting of a fashion chain, examining the habitat clusters of a certain plant species, etc.

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice, People Republic of China](https://en.wikipedia.org/wiki/Hunan).

### The study area and data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

We will reuse the data that we exercised in the [In-class Exercise 2 - Spatial Weights and Application](https://isss624-1stcommit.netlify.app/in-class_ex/in-class_ex1/in-class_ex1) segment of this website.

### Setting the analytical tools

First, we load the necessary R packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data into the R Environment

### Import shapefile into R environment

We import the Hunan shapefile into R using the `sf` package.

```{r}
hunan <- st_read(dsn = "~/sylvie-le/ISSS624/In-class_Ex/In-class_Ex1/dataC/geospatial", layer = "Hunan")
```

### Import CSV file into R environment

```{r}
hunan2012 <- read_csv("~/sylvie-le/ISSS624/In-class_Ex/In-class_Ex1/dataC/aspatial/Hunan_2012.csv", show_col_types = FALSE)
```

### Perform relational join

```{r}
hunan <- left_join(hunan, hunan2012)
```

### Visualize regional development indicator

Now we will prepare a choropleth map showing the distribution of GDPPC 2012 in Hunan.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification",
            main.title.size = 1,
            main.title.position = "center",
            legend.text.size = 0.45)

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification",
            main.title.size = 1,
            main.title.position = "center",
            legend.text.size = 0.45)

tmap_arrange(equal, quantile, asp = 1, ncol = 2)
```

## Global Spatial Autocorrelation

### Computing contiguity spatial weight

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

### Row-standardized weights matrix

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy = TRUE)
rswm_q
```

Refer [HERE](https://r4gdsa.netlify.app/chap04.html#row-standardised-weights-matrix) for an explanation of the code and [HERE](https://www.rdocumentation.org/packages/spdep/versions/1.2-7/topics/nb2listw) for documentation on `nb2listw()`.

### Global Spatial Autocorrelation: Moran's I

#### Moran's Test

We will perform Moran test using `moran.test()` from `spdep`.

```{r}
moran.test(hunan$GDPPC,
           listw = rswm_q,
           zero.policy = TRUE,
           na.action = na.omit)
```

Moran I statistic is approximately 0.3, indicating clustered data. The neighbor observations tend to be similar.

#### Computing Monte Carlo Moran's I

We will conduct a permutation test for Moran's I statistic by generating 1,000 simulations.

```{r}
set.seed(1234) #to prevent the result from changing due to random calculation
bperm = moran.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999,
                 zero.policy = TRUE,
                 na.action = na.omit)
bperm
```

The result of 1,000 simulation is similar to the Moran's I test.

#### Visulize Monte Carlo Moran's I

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,
     freq = TRUE,
     breaks = 20,
     xlab = "Simulated Moran's I")
abline(v = 0, col = "red")
```

The distribution of the simulation result are skewed to the right. Most results are less than 0.

We can use ggplot2 to visualize Monte Carlo Moran's I.

```{r}
library(ggplot2)
df <- data.frame(bperm$res)
ggplot(df, aes(bperm$res)) +
  geom_histogram(fill = "gray", color = "black", closed = "right") +
  scale_x_continuous(breaks = 20) +
  geom_vline(aes(xintercept = 0), color = "red") +
  labs(title = "Histogram of bperm$res", x = "Simulated Moran's I", y = "Frequency") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
```

### Global Spatial Autocorrelation: Geary's

**Geary's C test**

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

c-value = 0.69 \< 1. Therefore, the data is clustered and neighbor observations tend to be similar.

#### Compute Monte Carlo Geary's C

We will conduct 1,000 simulations of Geary's C using `geary.mc()`.

```{r}
set.seed(1234)
bperm = geary.mc(hunan$GDPPC,
                 listw = rswm_q,
                 nsim = 999)
bperm
```

The result of the simulation is also 0.69, corroborating the result of Geary's C test.

#### Visualizing Monte Carlo Geary's C

```{r}
mean(bperm$res)
```

```{r}
var(bperm$res)
```

```{r}
summary(bperm$res)
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab = "Simulated Geary's C")
abline(v = 1, col = "red")
```

The distribution of the simulation is almost symmetrical around the x = 1 intercept.

## Spatial Correlogram

### Compute Moran's I correlogram

```{r}
MI_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "I",
                          style = "W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

### Compute Geary's C correlogram and plot

```{r}
CG_corr <- sp.correlogram(wm_q,
                          hunan$GDPPC,
                          order = 6,
                          method = "C",
                          style = "W")
plot(CG_corr)
```

```{r}
print(CG_corr)
```

## Cluster and Outlier Analysis

### Compute local Moran's I

The code chunks below are used to compute local Moran\'s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

The code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat)*.*

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### Map the local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Map the local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.text.size = 0.5)
```

#### Mapping local Moran\'s I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.text.size = 0.5)
```

#### Map both local Moran's I value and p's value

For effective interpretation, it is better to plot both the local Moran\'s I values map and its corresponding p-values map next to each other.

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)+
  tm_layout(legend.text.size = 0.4, legend.title.size = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.text.size = 0.4, legend.title.size = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Create a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### Plotting Moran's scatter plot

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.

### Plotting Moran scatter plot with standardised variable

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

Step 1: define the quadrant

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Step 2: center the variable of interest around its means

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
```

Step 3: center the local Moran around the mean

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

Step 4: set a statistical significance level for the local Moran

```{r}
signif <- 0.05       
```

These four command lines define the high-high, low-low, low-high and high-low categories.

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

Step 5: place non-significant Moran in the category 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

We can combined all the steps into one single code chunk as shown below.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(legend.text.size = 0.5)
```

For effective interpretation, it is better to plot both the local Moran\'s I values map and its corresponding p-values map next to each other.

```{r}
gdppc <- qtm(hunan, "GDPPC") +
  tm_layout(legend.text.size = 0.5, legend.title.size = 0.6)

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) +
  tm_layout(legend.text.size = 0.5, legend.title.size = 0.6)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term \'hot spot\' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### Getis and Ord\'s G-Statistics

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord\'s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

### Deriving distance-based weight matrix

#### Deriving the centroid

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Use bin to put longitude and lattitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

The output spatial weights object is called `wm62_lw`.

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbors and the less densely settled areas (usually the rural counties) tend to have lesser neighbors. Having many neighbors smoothes the neighbor relationship across more neighbors.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes \"gstari\" set to TRUE or FALSE, \"call\" set to the function call, and class \"localG\".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Join the Gi values to their corresponding hunan sf data frame

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC") +
  tm_layout(legend.text.size = 0.5, legend.title.size = 0.5)

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5) +
  tm_layout(legend.text.size = 0.5, legend.title.size = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC") +
  tm_layout(legend.text.size = 0.6, legend.title.size = 0.6)

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5) +
  tm_layout(legend.text.size = 0.6, legend.title.size = 0.6)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
